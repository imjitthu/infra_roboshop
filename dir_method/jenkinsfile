pipeline {

 agent any

 parameters {

   //string(name: 'tfaction', defaultValue: 'init', description: 'terraform actions')
   choice(name: 'tfaction', choices: ['init', 'plan', 'apply -auto-approve', 'destroy -auto-approve'], description: 'Pick any action')

 }

environment {

    tfaction = "terraform ${tfaction}"

            }

    stages ('Installing RoboShop WebApplication Components') {
        stage ('Installing Databases') {
            parallel {
                stage ('Installing MongoDB') {
                    steps {
                        dir ('mongo') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-mongo.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        }    
                    }
                    steps {
                        dir ('mongo') {
                        if (env.tfaction == 'apply') {
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'mongo_inv', playbook: 'mongo.yml'
                        }
                        }
                    }
                    }
                stage ('Installing MySQL') {
                    steps {
                        dir ('mysql') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-mysql.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'mysql_inv', playbook: 'mysql.yml'
                    }
                    }
                }
            }
        }
        stage ('Installing Redis and RabbitMQ Server') {
            parallel {
                stage ('Installing Redis Component') {
                    steps {
                        dir('redis') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-redis.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'redis_inv', playbook: 'redis.yml'
                    }
                    }
                }
                stage ('Installing RabbitmQ Server') {
                    steps {
                        dir('rabbitmq') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-rabbitmq.git'
                        sh """
                        ${env.tfaction}
                        """
                                } 
                            }
                        }
                    }
                }
            }
        stage ('Installing Components: CART, CATALOGUE, USER, SGIPPING, PAYMENT') {
            parallel {
                stage ('Installing CART Component') {
                    steps {
                        dir('cart') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-cart.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'cart_inv', playbook: 'cart.yml'
                        }
                    }
                }
                stage ('Installing CATALOGUE Component') {
                    steps {
                        dir('catalogue') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-catalogue.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'catalogue_inv', playbook: 'catalogue.yml'
                        }
                    }
                }
                stage ('Installing USER Component') {
                    steps {
                        dir('user') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-user.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'user_inv', playbook: 'user.yml'
                        }
                    }
                }
                stage ('Installing SHIPPING Component') {
                    steps {
                        dir('shipping') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-shipping.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'shipping_inv', playbook: 'shipping.yml'
                        }
                    }
                }
                stage ('Installing Payment Component') {
                    steps {
                        dir('payment') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-payment.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'payment_inv', playbook: 'payment.yml'
                        }
                    }
                }
            }
        }
        stage ('Installing Roboshop Web Server') {
            steps {
                dir('frontend') {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awskey', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        git 'https://github.com/imjitthu/tfas-frontend.git'
                        sh """
                        ${env.tfaction}
                        """
                        } 
                        ansiblePlaybook credentialsId: 'DevOps321', installation: 'ansibletool', inventory: 'frontend_inv', playbook: 'frontend.yml'
                        }
                }
            }
        }
    }